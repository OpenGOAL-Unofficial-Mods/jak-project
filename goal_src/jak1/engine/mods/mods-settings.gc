;;-*-Lisp-*-
(in-package goal)

;; name: define-custom-functions-here.gc
;; name in dgo: define-custom-functions-here
;; dgos: TODO

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is this file for.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| This file is a place where you can define custom functions and GOAL code
 to call inside of put-custom-code-here.gc for example I have defined a function that increases
 the powercell count by one when it is called
 |#


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Useful GOAL modding documentation
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| 
Checks the condition and if it is true it does first argument if false it does optional second argument
(if (condition) (do if true) (do if false))

Gives a random FLOAT or INT between the provided ranges when called
(rand-vu-float-range 0.0 2.0)
(rand-vu-int-range 0 10)

if the result of rand-vu-int-range is 1, then DANCE! if it is not 1, then Don't dance
(if (= (rand-vu-int-range 0 10) 1) (DANCE!) (Don't dance))


|#

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define Settings to use in mods
;;;;;;;;;;;;;;;;;;;;;;;;;;

(define startingDebugContinuePoint "village1-hut")

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define Custom Settings Variables to use in mods
;;;;;;;;;;;;;;;;;;;;;;;;;;
(defenum mp-game-role
  :type uint32
  (lobby)
  (hider)
  (seeker)
  (found)
  )

(defenum mp-game-state
  :type uint32
  (mp-game-invalid)
  (mp-game-lobby)
  (mp-game-starting-soon)
  (mp-game-play-hide)
  (mp-game-play-seek)
  (mp-game-end)
  )

(defun-debug mp-game-state->string ((cmd mp-game-state))
  (enum->string mp-game-state cmd)
  )

(defenum mp-tgt-state
  :type uint32
  (mp-tgt-invalid)
  (mp-tgt-lobby)
  (mp-tgt-ready)
  (mp-tgt-start)
  (mp-tgt-hider-start)
  (mp-tgt-hider-play)
  (mp-tgt-hider-found)
  (mp-tgt-seeker-wait)
  (mp-tgt-seeker-start)
  (mp-tgt-seeker-play)
  )

  (defun-debug mp-tgt-state->string ((cmd mp-tgt-state))
  (enum->string mp-tgt-state cmd)
  )

(defun is-seeker? ((mp_state mp-tgt-state))
  (or (= mp_state (mp-tgt-state mp-tgt-seeker-wait))
      (= mp_state (mp-tgt-state mp-tgt-seeker-play))
      )
  )

(defenum tgt-color
  :type uint32
  (normal)
  (green)
  (blue)
  (red)
  (yellow)
  (white)
  (black)
  (purple)
  (pink)
  (light-blue)
  (holo)
  )

(defun-debug tgt-color->string ((cmd tgt-color))
  (enum->string tgt-color cmd)
  )

(deftype remote-player-info (structure)
 ((username   string)
  (color      tgt-color)
  (trans_x    float)
  (trans_y    float)
  (trans_z    float)
  (quat_x     float)
  (quat_y     float)
  (quat_z     float)
  (quat_w     float)
  (tgt_state  symbol)
  (role       mp-game-role)
  (mp_state   mp-tgt-state)
  )
  :pack-me
  (:methods
    (new (symbol type) _type_ 0)
    )
  )

(defconstant MAX_USERNAME_LEN 16)

(defmethod new remote-player-info ((allocation symbol) (type-to-make type))
  (let ((obj (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> obj username) (new 'global 'string MAX_USERNAME_LEN (the-as string #f)))
    (set! (-> obj trans_x) 0.0)
    (set! (-> obj trans_y) 0.0)
    (set! (-> obj trans_z) 0.0)
    (set! (-> obj quat_x) 0.0)
    (set! (-> obj quat_y) 0.0)
    (set! (-> obj quat_z) 0.0)
    (set! (-> obj quat_w) 0.0)
    (set! (-> obj tgt_state) 'invalid)
    (set! (-> obj role) (mp-game-role hider))
    (set! (-> obj mp_state) (mp-tgt-state mp-tgt-invalid))
    obj
    )
  )

(deftype multiplayer-info (structure)
 ((player_num           int32)
  (players    remote-player-info MAX_MULTIPLAYER_COUNT :inline)
  (state        mp-game-state)
  (alert-found-pnum     int32)
  (alert-seeker-pnum    int32)
  (level-mode          symbol)
  (continue-point-mode symbol)
  (num-seekers          int32)
  (hide-mode?          symbol)
  (hider-speed          float)
  (seeker-speed         float)
  (rand-seeker?        symbol)
  (fog-distance         float)
  (time-to-hide         float)
  (seeker-timeout       float)
  (hiders-move?        symbol)
  (hiders-pauser-zoom? symbol)
  )
  (:methods
    (new (symbol type) _type_ 0)
    )
  )

(defmethod new multiplayer-info ((allocation symbol) (type-to-make type))
  (let ((obj (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> obj player_num) -1)
    (set! (-> obj state) (mp-game-state mp-game-invalid))
    (set! (-> obj alert-found-pnum) -1)
    (set! (-> obj alert-seeker-pnum) -1)
    (dotimes (idx MAX_MULTIPLAYER_COUNT)
      (set! (-> obj players idx username) (new 'global 'string MAX_USERNAME_LEN ""))
      (set! (-> obj players idx mp_state) (mp-tgt-state mp-tgt-invalid))
      )
    obj
    )
  )