;;-*-Lisp-*-
(in-package goal)

;; name: mods-settings.gc
;; name in dgo: mods-settings
;; dgos: TODO

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is this file for.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| This file is a place where you can define custom functions and GOAL code
 to call inside of put-custom-code-here.gc for example I have defined a function that increases
 the powercell count by one when it is called
 |#


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Useful GOAL modding documentation
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| 
Checks the condition and if it is true it does first argument if false it does optional second argument
(if (condition) (do if true) (do if false))

Gives a random FLOAT or INT between the provided ranges when called
(rand-vu-float-range 0.0 2.0)
(rand-vu-int-range 0 10)

if the result of rand-vu-int-range is 1, then DANCE! if it is not 1, then Don't dance
(if (= (rand-vu-int-range 0 10) 1) (DANCE!) (Don't dance))


|#

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define Settings to use in mods
;;;;;;;;;;;;;;;;;;;;;;;;;;

(define startingDebugContinuePoint "village1-hut")

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Define Custom Settings Variables to use in mods
;;;;;;;;;;;;;;;;;;;;;;;;;;

(deftype hns-player-info (structure)
 ((role               mp-game-role)
  (mp_state           mp-tgt-state)
  (collected_by_pnum  int32)
  (rank               int32)
  )
  :pack-me
  (:methods
    (new (symbol type) _type_ 0)
    )
  )

;; TODO - fix
(defmethod new hns-player-info ((allocation symbol) (type-to-make type))
  (let ((obj (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> obj role) (mp-game-role hider))
    (set! (-> obj mp_state) (mp-tgt-state mp-tgt-invalid))
    (set! (-> obj collected_by_pnum) -1)
    (set! (-> obj rank) -1)
    obj
    )
  )

(deftype remote-player-info (structure)
 ((username   string)
  (color      tgt-color)
  (is_admin?  symbol) ;; #t / #f
  (trans_x    float)
  (trans_y    float)
  (trans_z    float)
  (quat_x     float)
  (quat_y     float)
  (quat_z     float)
  (quat_w     float)
  (tgt_state  symbol)
  (hns_info   hns-player-info :inline)  ;; hide-n-seek specific info
  )
  :pack-me
  (:methods
    (new (symbol type) _type_ 0)
    )
  )

(defconstant MAX_USERNAME_LEN 100)

;; TODO - fix
(defmethod new remote-player-info ((allocation symbol) (type-to-make type))
  (let ((obj (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> obj username) (new 'global 'string MAX_USERNAME_LEN (the-as string #f)))
    (set! (-> obj color) (tgt-color green))
    (set! (-> obj is_admin?) #f)
    (set! (-> obj trans_x) 0.0)
    (set! (-> obj trans_y) 0.0)
    (set! (-> obj trans_z) 0.0)
    (set! (-> obj quat_x) 0.0)
    (set! (-> obj quat_y) 0.0)
    (set! (-> obj quat_z) 0.0)
    (set! (-> obj quat_w) 0.0)
    (set! (-> obj tgt_state) 'invalid)
    obj
    )
  )

;;TODO     (set! (-> obj last-winner) -1)
;; This contains data specific to the hide and seek game mode that should be synced with all clients
  (deftype hide-and-seek-game-info-struct (structure)
  (
    ;; admin-driven settings
    (target-hider-type        tgt-hider-type);;Jak or orb
    (level-mode               hns-level-mode);;Random level, Hub, or level symbol
    (continue-point-mode      hns-continue-pt-mode);;Spawn seekers/hiders at same checkpoint or random in level
    (hiders-move?             symbol);;Allow movement/dont after a countdown
    (hiders-pause-zoom?       symbol);;Disable zooming and pause for hiders if they are using it to cheat.
    (seekers-infect?          symbol);;Future feature 
    (num-seekers              int32);; Number of seekers in a given match
    (last-winner-as-seeker?   symbol);; Can be 'RANDOM or 'LASTWINNER if lastwinner is default, or more than one seeker the rest are assigned randomly
    (fog-distance             float);; Change the distance to see hiders
    (hider-speed              float);; Float value that modifies a hiders speed
    (seeker-speed             float);; Float value that modifies a seekers speed (can be under 1 to slow them)
    (time-to-start            int32);; Time before we warp hiders from lobby into the game
    (time-to-hide             int32);;Time before we warp seekers from lobby into the game
    (hider-victory-timeout    int32);; If the match goes on for this length then the hiders win
    (post-game-timeout        int32);; Time from victory -> back to lobby

    ;; server-driven fields
    (alert-found-pnum     int32)
    (alert-seeker-pnum    int32)
    (num-hiders           int32);; Number of total hiders, set this on game start
    (num-hiders-left      int32);; Number of remaining hiders
  )
  :pack-me
  (:methods
    (new (symbol type) _type_ 0)
    )
  )
  
;; TODO - fix
(defmethod new hide-and-seek-game-info-struct ((allocation symbol) (type-to-make type))
  (let ((obj (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> obj target-hider-type) (tgt-hider-type jak))
    (set! (-> obj level-mode) (hns-level-mode jungle))
    (set! (-> obj continue-point-mode) (hns-continue-pt-mode same))
    (set! (-> obj hiders-move?) #t)
    (set! (-> obj hiders-pause-zoom?) #t)
    (set! (-> obj seekers-infect?) #f)
    (set! (-> obj num-seekers) 1)
    (set! (-> obj last-winner-as-seeker?) #t)
    (set! (-> obj fog-distance) 0.0)
    (set! (-> obj hider-speed) 1.0)
    (set! (-> obj seeker-speed) 1.0)
    (set! (-> obj time-to-start) 10)
    (set! (-> obj time-to-hide) 30)
    (set! (-> obj hider-victory-timeout) 300) ;; 5 minutes
    (set! (-> obj post-game-timeout) 15)
    ;; server-driven fields
    (set! (-> obj alert-found-pnum) -1)
    (set! (-> obj alert-seeker-pnum) -1)
    (set! (-> obj num-hiders) 0)
    (set! (-> obj num-hiders-left) 0)
    obj))


;;This contains data that is not specific to each game mode, but needs to be synced across clients
(deftype multiplayer-info (structure)
 ((game-type-mode       symbol);;This is future proofing to allow other gamemodes in the codebase
  (player_num           int32)
  (lobby-name          symbol)
  (players    remote-player-info MAX_MULTIPLAYER_COUNT :inline)
  (hide-and-seek-game-info    hide-and-seek-game-info-struct :inline)
  (state        mp-game-state)
  )
  (:methods
    (new (symbol type) _type_ 0)
    )
  )

(defmethod new multiplayer-info ((allocation symbol) (type-to-make type))
  (let ((obj (object-new allocation type-to-make (the-as int (-> type-to-make size)))))
    (set! (-> obj game-type-mode) 'hide-and-seek)
    (set! (-> obj player_num) -1)
    (set! (-> obj lobby-name) 'test-lobby)
    (dotimes (idx MAX_MULTIPLAYER_COUNT)
      (set! (-> obj players idx username) (new 'global 'string MAX_USERNAME_LEN ""))
      )
    (set! (-> obj hide-and-seek-game-info target-hider-type) (tgt-hider-type jak))
    (set! (-> obj hide-and-seek-game-info level-mode) (hns-level-mode jungle))
    (set! (-> obj hide-and-seek-game-info continue-point-mode) (hns-continue-pt-mode same))
    (set! (-> obj hide-and-seek-game-info hiders-move?) #t)
    (set! (-> obj hide-and-seek-game-info hiders-pause-zoom?) #t)
    (set! (-> obj hide-and-seek-game-info seekers-infect?) #f)
    (set! (-> obj hide-and-seek-game-info num-seekers) 1)
    (set! (-> obj hide-and-seek-game-info last-winner-as-seeker?) #t)
    (set! (-> obj hide-and-seek-game-info fog-distance) 0.0)
    (set! (-> obj hide-and-seek-game-info hider-speed) 1.0)
    (set! (-> obj hide-and-seek-game-info seeker-speed) 1.0)
    (set! (-> obj hide-and-seek-game-info time-to-start) 10)
    (set! (-> obj hide-and-seek-game-info time-to-hide) 30)
    (set! (-> obj hide-and-seek-game-info hider-victory-timeout) 300) ;; 5 minutes
    (set! (-> obj hide-and-seek-game-info post-game-timeout) 15)
    ;; server-driven fields
    (set! (-> obj hide-and-seek-game-info alert-found-pnum) -1)
    (set! (-> obj hide-and-seek-game-info alert-seeker-pnum) -1)
    (set! (-> obj hide-and-seek-game-info num-hiders) 0)
    (set! (-> obj hide-and-seek-game-info num-hiders-left) 0)
    (set! (-> obj state) (mp-game-state mp-game-invalid))
    obj
    )
  )

