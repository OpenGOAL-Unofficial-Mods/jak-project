;;-*-Lisp-*-
(in-package goal)

;; name: put-custom-code-here.gc
;; name in dgo: put-custom-code-here
;; dgos: TODO


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is this file for.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| This file contains function defenitions that are pre placed in the mod base,
so if you place custom code inside of these functions, it will exectue based on
the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
an orb |#


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(define *sync-random-level-mode* #f)
(define *show-player-list?* #t)

(defun runs-every-frame ()
  (when (and (!= *target* #f) (!= (-> (level-get-target-inside *level*) name) 'title))
  ;; (gmenu-1)
  
  ;; setup our own remote-player-info if we haven't yet
  (set-up-remote-if-null)

  ;; register with server if we haven't yet
  (when (and *target* (not *registered-with-server?*) (-> *self-player-info* username) (not (string= (-> *self-player-info* username) "")))
    (pc-http-register *multiplayer-info* *self-player-info*)
    (set! *registered-with-server?* #t)
    ;; wait a bit to ensure registration before syncing position
    (set! *last-position-sync-time* (+ (-> *display* base-frame-counter) (seconds 3.0)))
    )

  (when (and *target* (>= (-> *multiplayer-info* player_num) 0) (< (-> *multiplayer-info* player_num) MAX_MULTIPLAYER_COUNT))
    (when (!= (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-invalid))
      ;; check if player wants to change their color
      (when (and (cpad-hold? 0 l3) (cpad-pressed? 0 left))
        (change-local-color -1)
        )
      (when (and (cpad-hold? 0 l3) (cpad-pressed? 0 right))
        (change-local-color 1)
        )

      ;; check if player wants to toggle playerlist hide/shown
      (when (and (cpad-hold? 0 l3) (cpad-pressed? 0 up))
        (set! *show-player-list?* (not *show-player-list?*))
        )

      ;; jump to lobby if we're in lobby state and not already there (e.g. joined in middle of game)
      (when (and (= (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-lobby))
                  (not (string= (-> *game-info* current-continue name) *lobby-continue-point*))
                  )
        (reset-player-to-lobby)
        )
      (with-dma-buffer-add-bucket ((testbuf (-> (current-frame) global-buf)) (bucket-id subtitle))
        
        (when *show-player-list?*
          (draw-active-players-text testbuf)
          )

        (case (-> *multiplayer-info* state)
          (((mp-game-state mp-game-lobby))
            ;; jump to lobby if game is in lobby state and we're not already there
            (when (not (string= (-> *game-info* current-continue name) *lobby-continue-point*))
              (reset-player-to-lobby)
              )

            (set! *sync-random-level-mode* #f)
            
            ;; set to lobby state if not lobby/ready/start
            (when (and (!= (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-lobby))
                      (!= (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-ready))
                      (!= (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-start))
                      )
              (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-lobby))
              )
            
            (case (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state)
              (((mp-tgt-state mp-tgt-lobby))
                (draw-instructions-text testbuf "Press R2 and L2 to ready up")
                )
              (((mp-tgt-state mp-tgt-ready))
                (if (= (-> *multiplayer-info* players (-> *multiplayer-info* player_num) is_admin?) 1)
                  (draw-instructions-text testbuf "Press R2 and L2 to start game")
                  (draw-instructions-text testbuf "Press R2 and L2 to vote to start the game")
                  )
                )
              (((mp-tgt-state mp-tgt-start))
                (draw-instructions-text testbuf "You've voted to start the game")
                )
              )
            
            ;; check for L2 and R2 pressed on this frame (allow one to be held so not frame perfect)
            (when (or (and (cpad-hold? 0 r2) (cpad-pressed? 0 l2))
                      (and (cpad-pressed? 0 r2) (cpad-hold? 0 l2))
                      (and (cpad-pressed? 0 r2) (cpad-pressed? 0 l2))
                      )
              (case (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state)
                (((mp-tgt-state mp-tgt-lobby))
                  (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-ready))
                  )
                (((mp-tgt-state mp-tgt-ready))
                  (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-start))
                  )
                )
              )
            )
          (((mp-game-state mp-game-starting-soon))
            (when (!= *last-game-state* (mp-game-state mp-game-starting-soon))
              (set! *last-game-state* (mp-game-state mp-game-starting-soon))
              (set! *game-state-change-time* (-> *display* base-frame-counter))
              ;; ensure game is setup properly
              (setup-world-hns)
              )
            (let* ((now (-> *display* base-frame-counter))
                    (time-remaining (max 0 (- (+ *game-state-change-time* (seconds (-> *multiplayer-info* hide-and-seek-game-info time-to-start))) now)))
                    )
              ;; if we're admin and haven't synced our level, do it now (todo: update on any change, e.g. from progress menu)
              (when (and (not *sync-random-level-mode*) 
                        (should-update-game-settings?)
                        )
                (set! *sync-random-level-mode* #t)
                (update-hide-and-seek-settings)
                )

              ;; jump to lobby if game is in starting-soon state and we're not already there
              (when (not (string= (-> *game-info* current-continue name) *lobby-continue-point*))
                (reset-player-to-lobby)
                (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-lobby))
                )
              (when (cpad-pressed? 0 r2)
                (case (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state)
                  (((mp-tgt-state mp-tgt-lobby))
                    (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-ready))
                    )
                  )
                )
              ;; game was already started, so if we ready, move us to start
              (when (= (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-ready))
                (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-start))
                )

              (case (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state)
                (((mp-tgt-state mp-tgt-lobby))
                  ;; TODO: allow for freecam
                  (draw-instructions-text testbuf (string-format "Hiders are hiding, seekers will spawn in ~D seconds" (/ time-remaining TICKS_PER_SECOND)))
                  )
                (((mp-tgt-state mp-tgt-ready) (mp-tgt-state mp-tgt-start))
                  (draw-instructions-text testbuf (string-format "Game starting in ~D seconds" (/ time-remaining TICKS_PER_SECOND)))
                  )
                )
              )
            )
          (((mp-game-state mp-game-play-hide))
            (when (!= *last-game-state* (mp-game-state mp-game-play-hide))
              (set! *last-game-state* (mp-game-state mp-game-play-hide))
              (set! *game-state-change-time* (-> *display* base-frame-counter))
              )
            (let* ((now (-> *display* base-frame-counter))
                    (time-remaining (max 0 (- (+ *game-state-change-time* (seconds (-> *multiplayer-info* hide-and-seek-game-info time-to-hide))) now)))
                    )
              ;; TODO: if seeker, blackout with timer
              (case (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state)
                (((mp-tgt-state mp-tgt-lobby))
                  ;; TODO: allow for freecam
                  (draw-instructions-text testbuf (string-format "Hiders are hiding, seekers will spawn in ~D seconds" (/ time-remaining TICKS_PER_SECOND)))
                  )
                (((mp-tgt-state mp-tgt-ready) (mp-tgt-state mp-tgt-start))
                  (case (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info role)
                    (((mp-game-role hider))
                      (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-hider-start))
                      )
                    (((mp-game-role seeker))
                      (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-seeker-wait))
                      )
                    )
                  )
                (((mp-tgt-state mp-tgt-hider-start))
                  ;; spawn at random checkpoint (based on toggle)
                  (start 'play (get-continue-by-name *game-info* (random-checkpoint-by-level-idx  (-> *multiplayer-info* hide-and-seek-game-info level-mode))))
                  ;; TODO: freeze and show text and timer to controls

                  ;; switch to hider-play
                  (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-hider-play))
                  )
                (((mp-tgt-state mp-tgt-hider-play))
                  ;; TODO: if frozen, give controls back
                  (draw-instructions-text testbuf (string-format "You are a hider! Seekers will spawn in ~D seconds" (/ time-remaining TICKS_PER_SECOND)))
                  )
                (((mp-tgt-state mp-tgt-seeker-wait))
                  (draw-instructions-text testbuf (string-format "You are a seeker! Hiders are hiding, seekers will spawn in ~D seconds" (/ time-remaining TICKS_PER_SECOND)))
                  )
                (else
                  ;; anyone else?
                  (draw-instructions-text testbuf (string-format "Hiders are hiding, seekers will spawn in ~D seconds" (/ time-remaining TICKS_PER_SECOND)))
                  )
                )
              )
            )
          (((mp-game-state mp-game-play-seek))
            (when (!= *last-game-state* (mp-game-state mp-game-play-seek))
                (set! *last-game-state* (mp-game-state mp-game-play-seek))
                (set! *game-state-change-time* (-> *display* base-frame-counter))
                )
            (let* ((now (-> *display* base-frame-counter))
                    (time-remaining (max 0 (- (+ *game-state-change-time* (seconds (-> *multiplayer-info* hide-and-seek-game-info hider-victory-timeout))) now)))
                    )
              ;; TODO: show alerts when hiders collected (server should set most recent case and then clear back to -1 every 5s or so)
              (when (and (>= (-> *multiplayer-info* hide-and-seek-game-info alert-found-pnum) 0)
                        (>= (-> *multiplayer-info* hide-and-seek-game-info alert-seeker-pnum) 0))
                (draw-alert-text testbuf (string-format "~S found by ~S!"
                                            (-> *multiplayer-info* players (-> *multiplayer-info* hide-and-seek-game-info alert-found-pnum) username)
                                            (-> *multiplayer-info* players (-> *multiplayer-info* hide-and-seek-game-info alert-seeker-pnum) username)
                                            ))
                )

              (case (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state)
                (((mp-tgt-state mp-tgt-lobby))
                  ;; TODO: allow for freecam
                  (draw-instructions-text testbuf (string-format "Seekers have ~D seconds to find the hiders" (/ time-remaining TICKS_PER_SECOND)))
                  )
                (((mp-tgt-state mp-tgt-ready) (mp-tgt-state mp-tgt-start))
                  ;; shouldn't happen?
                  (draw-instructions-text testbuf "ERROR: Unexpected state. Please tell Barg/Zed")
                  )
                (((mp-tgt-state mp-tgt-hider-start))
                  ;; shouldn't happen?
                  (draw-instructions-text testbuf "ERROR: Unexpected state. Please tell Barg/Zed")
                  )
                (((mp-tgt-state mp-tgt-hider-play))
                  ;; TODO: optionally freeze
                  (draw-instructions-text testbuf (string-format "Seekers have ~D seconds to find the hiders" (/ time-remaining TICKS_PER_SECOND)))
                  (case (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info role)
                    (((mp-game-role found))
                      (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-hider-found))
                      )
                    )
                  )
                (((mp-tgt-state mp-tgt-hider-found))
                  ;; TODO: freeze inputs, timer then return to lobby
                  (when (>= (-> *self-player-info* hns_info collected_by_pnum) 0)
                    (draw-instructions-text testbuf (string-format "You were found by ~S and placed ~D/~D. Seekers have ~D seconds to find the hiders"
                                                      (-> *multiplayer-info* players (-> *self-player-info* hns_info collected_by_pnum) username)
                                                      (-> *self-player-info* hns_info rank)
                                                      (-> *multiplayer-info* hide-and-seek-game-info num-hiders)
                                                      (/ time-remaining TICKS_PER_SECOND)
                                                      )
                                                    )
                    )
                  )
                (((mp-tgt-state mp-tgt-seeker-wait))
                  ;; TODO: freeze, show text and timer to controls
                  (start 'play (get-continue-by-name *game-info* (random-checkpoint-by-level-idx (-> *multiplayer-info* hide-and-seek-game-info level-mode))))
                  (set-blackout-frames 0)
                  (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-seeker-play))
                  )
                (((mp-tgt-state mp-tgt-seeker-play))
                  ;; TODO: option to give up
                  (draw-instructions-text testbuf (string-format "Seekers have ~D seconds to find the hiders" (/ time-remaining TICKS_PER_SECOND)))
                  ;; check for finding other players
                  (dotimes (idx MAX_MULTIPLAYER_COUNT)
                    (when (and (!= (-> *multiplayer-info* player_num) idx)
                              (!= (-> *multiplayer-info* players idx hns_info mp_state) (mp-tgt-state mp-tgt-invalid))
                              (!= (-> *multiplayer-info* players idx hns_info mp_state) (mp-tgt-state mp-tgt-hider-found))
                              (!= (-> *multiplayer-info* players idx hns_info mp_state) (mp-tgt-state mp-tgt-lobby))
                              (!= (-> *multiplayer-info* players idx hns_info role) (mp-game-role seeker)) 
                              (< (vector-vector-distance (-> *target* root trans) (-> (get-target idx) root trans)) (meters 2.0))
                              )
                      (pc-http-mark-found idx)
                      )
                    )
                  )
                (else
                  ;; anyone else?
                  (draw-instructions-text testbuf (string-format "Seekers have ~D seconds to find the hiders" (/ time-remaining TICKS_PER_SECOND)))
                  )
                )
              )
            )
          (((mp-game-state mp-game-end))
            (when (!= *last-game-state* (mp-game-state mp-game-end))
                (set! *last-game-state* (mp-game-state mp-game-end))
                (set! *game-state-change-time* (-> *display* base-frame-counter))
                )
            (let* ((now (-> *display* base-frame-counter))
                    (time-remaining (max 0 (- (+ *game-state-change-time* (seconds (-> *multiplayer-info* hide-and-seek-game-info post-game-timeout))) now)))
                    )
              (clear *temp-string*)
              (dotimes (idx MAX_MULTIPLAYER_COUNT)
                (when (= (-> *multiplayer-info* players idx hns_info rank) 1)
                  (if (string= *temp-string* "")
                    (format *temp-string* "~S" (-> *multiplayer-info* players idx username))
                    (format *temp-string* ", ~S" (-> *multiplayer-info* players idx username))
                    )
                  )
                )
              (draw-instructions-text testbuf (string-format "WINNERS: ~S! Respawning in lobby in ~D seconds"
                                                *temp-string*
                                                (/ time-remaining TICKS_PER_SECOND)
                                                )
                                              )
              )
            )
          )
        )
      )

    ;; if never synced positions, or its been X ms, request updated positions
    (when (and (>= (-> *multiplayer-info* player_num) 0)
               (or (not *last-position-sync-time*)
                   (>= (- (-> *display* base-frame-counter) *last-position-sync-time*) (seconds 0.05))
                   )
               )
      ;; update last sync time
      (set! *last-position-sync-time* (-> *display* base-frame-counter))

      ;; update this player's position and send to server
      (update-multiplayer-info)

      ;; if first time, we need to change our state from invalid to lobby
      ;; this is also sort of like an "ack" back to the server to count you as fully joined
      (if (= (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-invalid))
        (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) hns_info mp_state) (mp-tgt-state mp-tgt-lobby))
        )
      
      ;; send updated player info to server
      (pc-http-update)

      ;; request to get positions of other players from server (async)
      (pc-http-get)
      )

    (spawn-multiple-targets)

    ;; color ourselves
    (color-target *target* (-> *self-player-info* color)) ;; otherwise use player's choice
    )
    )
  (none)
  )

(defun runs-on-orb-pickup ((parent process-tree))
  (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
    ;; Code here runs on ANY orb pickup


    (when from-cache?
      ;; Code here runs only if the orb was from an orb cache

      )

    (when (not from-cache?)
      ;; Code here runs only if the orb was NOT from an orb cache

      )
    )
  (none)
  )

(defun runs-on-fly-pickup ()
  ;; Code here runs on any scout fly pickup

  (none)
  )

(defun runs-on-cell-pickup ((cell-event symbol))
  (case cell-event
    (('pickup)      
      ;; Code here runs as soon as you pickup a powercell

      )
    (('cutscene-end)      
      ;; Code here runs at the end of any powercell cutscene

      )
    )

  (none)
  )

(defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
  (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
    ;; Code here runs as soon as you pickup ANY eco

    (case eco-type
      (((pickup-type eco-yellow))      
        ;; Code here runs as soon as you pickup yellow eco

        )
      (((pickup-type eco-red))      
        ;; Code here runs as soon as you pickup red eco

        )
      (((pickup-type eco-blue))      
        ;; Code here runs as soon as you pickup blue eco

        )
      (((pickup-type eco-pill))      
        ;; Code here runs as soon as you pickup small green eco

        )
      (((pickup-type eco-green))      
        ;; Code here runs as soon as you pickup big green eco 

        )
      )
    
    (when from-vent?
      ;; Code here runs only if the eco was picked up from a vent

      )
    )

  (none)
  )

(defun runs-on-jak-spawn ()
  ;; Code here runs every time jak spawns (loading a file new game or death)   


	
	 
	
  (none)
  )

(defun runs-on-jak-death ((death-event symbol))
  (case death-event
    (('dying)
      ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
      
      )
    (('blackout)
      ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

      )
    )
  
  (none)
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; deprecated function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| these are no longer recommended/supported however we include them anyways to not break anyones mods.
|#
